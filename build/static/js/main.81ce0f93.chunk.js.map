{"version":3,"sources":["Components/Board.js","Components/Dashboard.js","Components/PlantImage.js","Components/MainPage.js","Components/Request.js","App.js","serviceWorker.js","index.js"],"names":["Board","props","plantId","Fragment","className","console","log","plantName","text","Dashboard","id","alt","src","soloOk","air","lampada","temperatura","umidade","lumens","PlantImage","MainPage","dados","body","lightStatus","airHumidity","soilHumidityStatus","temperature","soilHumidity","Request","state","setInterval","document","location","reload","axios","get","then","res","data","setState","this","React","Component","App","Boolean","window","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iZA0EeA,MAvEf,SAAeC,GACb,OAAQA,EAAMC,SACZ,IAAK,IACD,OACE,kBAAC,IAAMC,SAAP,KACE,yBAAKC,UAAU,UACb,wBAAIA,UAAU,cAAd,WACA,uBAAGA,UAAU,aAAb,wMAOV,IAAK,IACD,OACE,kBAAC,IAAMD,SAAP,KACE,yBAAKC,UAAU,UACb,wBAAIA,UAAU,cAAd,cACA,uBAAGA,UAAU,aAAb,0SASN,IAAK,IACL,OACE,kBAAC,IAAMD,SAAP,KACE,yBAAKC,UAAU,UACb,wBAAIA,UAAU,cAAd,YACA,uBAAGA,UAAU,aAAb,uNAON,IAAK,IACD,OACE,kBAAC,IAAMD,SAAP,KACE,yBAAKC,UAAU,UACb,wBAAIA,UAAU,cAAd,cACA,uBAAGA,UAAU,aAAb,uUAUd,QACEC,QAAQC,IAAI,yBAEhB,OACE,kBAAC,IAAMH,SAAP,KACE,yBAAKC,UAAU,UAEb,wBAAIA,UAAU,cAAcH,EAAMM,WAClC,uBAAGH,UAAU,aACX,2BAAIH,EAAMO,U,MCELC,MAjEf,SAAmBR,GACjB,OACE,kBAAC,IAAME,SAAP,KACE,yBAAKC,UAAU,oBASb,yBAAKM,GAAG,YACN,yBACEA,GAAG,OACHC,IAAI,mBACJC,IAAI,gFAEN,uBAAGR,UAAU,QAAb,2BAAuCH,EAAMY,SAE/C,yBAAKH,GAAG,YACN,yBACEA,GAAG,OACHC,IAAI,mBACJC,IAAI,8DAEN,uBAAGR,UAAU,QAAb,kBAAoCH,EAAMa,IAA1C,OAEF,yBAAKJ,GAAG,YACN,yBACEA,GAAG,OACHC,IAAI,mBACJC,IAAI,gFAEN,uBAAGR,UAAU,QAAb,eAA8BH,EAAMc,UAEtC,yBAAKL,GAAG,YACN,yBACEA,GAAG,OACHC,IAAI,mBACJC,IAAI,wCAEN,uBAAGR,UAAU,QAAb,gBAAkCH,EAAMe,YAAxC,OAEF,yBAAKN,GAAG,YACN,yBACEA,GAAG,OACHC,IAAI,aACJC,IAAI,wHAEN,uBAAGR,UAAU,QAAb,oBAAsCH,EAAMgB,UAE9C,yBAAKP,GAAG,YACN,yBACEA,GAAG,OACHC,IAAI,gBACJC,IAAI,iHAEN,uBAAGR,UAAU,QAAb,iBAAmCH,EAAMiB,OAAzC,U,MCMKC,MAjEf,SAAoBlB,GAClB,OAAQA,EAAMC,SACZ,IAAK,IACH,OACE,kBAAC,IAAMC,SAAP,KACE,yBAAKO,GAAG,gBACN,yBACEE,IAAI,yFACJD,IAAI,UACJP,UAAU,iBAKpB,IAAK,IACH,OACE,kBAAC,IAAMD,SAAP,KACE,yBAAKO,GAAG,gBACN,yBACEE,IAAI,yFACJD,IAAI,aACJP,UAAU,iBAKpB,IAAK,IACH,OACE,kBAAC,IAAMD,SAAP,KACE,yBAAKO,GAAG,gBACN,yBACEE,IAAI,6IACJD,IAAI,WACJP,UAAU,iBAKpB,IAAK,IACH,OACE,kBAAC,IAAMD,SAAP,KACE,yBAAKO,GAAG,gBACN,yBACEE,IAAI,0JACJD,IAAI,aACJP,UAAU,iBAKpB,QACE,OACE,kBAAC,IAAMD,SAAP,KACE,yBAAKO,GAAG,gBACN,yBACEE,IAAI,kEACJD,IAAI,kBACJP,UAAU,mBCVTgB,MAzCf,SAAkBnB,GAEhB,OADAI,QAAQC,IAAIL,EAAMoB,MAAMC,KAAK,GAAGJ,QAE9B,kBAAC,IAAMf,SAAP,KACE,yBAAKC,UAAU,QACb,yBACEA,UAAU,WACVQ,IAAI,kEACJD,IAAI,SAEN,wBAAIP,UAAU,MAAd,qBAEF,yBAAKA,UAAU,WACb,6BAcA,kBAAC,EAAD,CAAOF,QAAQ,MACf,kBAAC,EAAD,CAAYE,UAAU,aAAaF,QAAQ,MAC3C,kBAAC,EAAD,CACEa,QAASd,EAAMoB,MAAMC,KAAK,GAAGC,YAC7BT,IAAKb,EAAMoB,MAAMC,KAAK,GAAGE,YACzBX,OAAQZ,EAAMoB,MAAMC,KAAK,GAAGG,mBAC5BT,YAAaf,EAAMoB,MAAMC,KAAK,GAAGI,YACjCT,QAAShB,EAAMoB,MAAMC,KAAK,GAAGK,aAC7BT,OAAQjB,EAAMoB,MAAMC,KAAK,GAAGJ,YCxCjBU,E,2MACjBC,MAAQ,CACJR,MAAO,CACHC,KAAM,CAAC,EAAE,EAAE,K,+MAOpBQ,aAAY,WAAYC,SAASC,SAASC,QAAO,KAAU,K,SACpDC,IAAMC,IAAN,gFACHC,MAAK,SAAAC,GACLhC,QAAQC,IAAI+B,EAAIC,MAEf,IAAMjB,EAAQgB,EAAIC,KAElB,EAAKC,SAAS,CAAElB,a,gIAOpB,OACI,kBAAC,IAAMlB,SAAP,KAGI,kBAAC,EAAD,CAAUkB,MAAOmB,KAAKX,MAAMR,a,GA5BHoB,IAAMC,WCI5BC,MAJf,WACE,OAAO,kBAAC,EAAD,OCOWC,QACW,cAA7BC,OAAOb,SAASc,UAEe,UAA7BD,OAAOb,SAASc,UAEhBD,OAAOb,SAASc,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASlB,SAASmB,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjB,MAAK,SAAAkB,GACjCA,EAAaC,kB","file":"static/js/main.81ce0f93.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../CSS/Board.css\";\n\nfunction Board(props) {\n  switch (props.plantId) {\n    case \"1\":\n        return (\n          <React.Fragment>\n            <div className=\"divImg\">\n              <h4 className=\"nomePlanta\">Alecrim</h4>\n              <p className=\"textPlant\">\n              Tenha cuidado para não regar demais, que é um erro comum com o alecrim. Lembre-se de que ele gosta de\n              condições secas e precisa de água apenas quando o solo parecer seco ao toque.\n              </p>\n            </div>\n          </React.Fragment>\n        );\n    case \"2\":\n        return (\n          <React.Fragment>\n            <div className=\"divImg\">\n              <h4 className=\"nomePlanta\">Hortelã</h4>\n              <p className=\"textPlant\">\n              O cultivo da hortelã é simples. Sua única exigência é ter terra\n            úmida e bem adubada, ela cresce tanto à meia sombra quanto no sol\n            pleno. Evite cultivá-la em canteiros coletivos: a planta produz\n            raízes invasoras e caules subterrâneos que logo escapam do controle.\n              </p>\n            </div>\n          </React.Fragment>\n        );\n        case \"3\":\n        return (\n          <React.Fragment>\n            <div className=\"divImg\">\n              <h4 className=\"nomePlanta\">Lírio</h4>\n              <p className=\"textPlant\">\n               O cultivo do Lírio é muito simples, ele não deve ficar exposto ao sol\n               e é necessário apenas uma rega por semana. O Lírio não é muito adequado para regiões onde o clima é bem seco.\n              </p>\n            </div>\n          </React.Fragment>\n        );\n        case \"4\":\n            return (\n              <React.Fragment>\n                <div className=\"divImg\">\n                  <h4 className=\"nomePlanta\">Azaléia</h4>\n                  <p className=\"textPlant\">\n                  Azaleia no jardim você só vai regar se o tempo seco perdurar mais de uma semana mas,\n                  no vaso, regue um pouco cada dia, de manhã cedo.\n                  Para que a sua azaleia dê flores todos os anos, faça uma poda de\n                 limpeza após as floradas e, nesta época também, faça a adubação com composto bem curtido.\n                  </p>\n                </div>\n              </React.Fragment>\n            );\n    \n    default:\n      console.log('Sorry, we are out of ');\n  }\n  return (\n    <React.Fragment>\n      <div className=\"divImg\">\n        \n        <h4 className=\"nomePlanta\">{props.plantName}</h4>\n        <p className=\"textPlant\">\n          <b>{props.text}</b>\n        </p>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default Board;\n","import React from \"react\";\nimport \"../CSS/Dashboard.css\";\n//import Rect from \"../Components/Rect\";\n\nfunction Dashboard(props) {\n  return (\n    <React.Fragment>\n      <div className=\"mainDashboardDiv\">\n        {/* <div id=\"innerDiv\">\n          <img\n            id=\"icon\"\n            alt=\"icone ventilador\"\n            src=\"https://img.icons8.com/cotton/2x/fan--v2.png\"\n          ></img>\n          <Rect label=\"Ventilação:\"></Rect>\n        </div>  */}\n        <div id=\"innerDiv\">\n          <img\n            id=\"icon\"\n            alt=\"icone termometro\"\n            src=\"https://www.arlgroup.com.au/wp-content/uploads/2017/08/Soil-Icon-Colour.png\"\n          ></img>\n          <p className=\"dash\">Situação do Solo: {props.soloOk}</p>\n        </div>\n        <div id=\"innerDiv\">\n          <img\n            id=\"icon\"\n            alt=\"icone termometro\"\n            src=\"https://icon-library.net/images/wind-icon/wind-icon-4.jpg\"\n          ></img>\n          <p className=\"dash\">Umidade do Ar: {props.air} %</p>\n        </div>\n        <div id=\"innerDiv\">\n          <img\n            id=\"icon\"\n            alt=\"icone termometro\"\n            src=\"https://cdn.icon-icons.com/icons2/961/PNG/512/bulb_icon-icons.com_74600.png\"\n          ></img>\n          <p className=\"dash\">Lâmpada: {props.lampada}</p>\n        </div>\n        <div id=\"innerDiv\">\n          <img\n            id=\"icon\"\n            alt=\"icone termometro\"\n            src=\"https://i.stack.imgur.com/jGgrE.png\"\n          ></img>\n          <p className=\"dash\">Temperatura: {props.temperatura} C</p>\n        </div>\n        <div id=\"innerDiv\">\n          <img\n            id=\"icon\"\n            alt=\"icone gota\"\n            src=\"https://icons-for-free.com/iconfiles/png/512/bottle+drink+drop+glass+resolutions+water+icon-1320084094734677285.png\"\n          ></img>\n          <p className=\"dash\">Umidade do Solo: {props.umidade}</p>\n        </div>\n        <div id=\"innerDiv\">\n          <img\n            id=\"icon\"\n            alt=\"icone lampada\"\n            src=\"https://www.clipartwiki.com/clipimg/full/83-835364_office-iconset-vexels-transparent-light-bulb-icon-png.png\"\n          ></img>\n          <p className=\"dash\">Luminosidade: {props.lumens} L</p>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default Dashboard;\n","import React from \"react\";\r\nimport \"../CSS/PlantImage.css\";\r\n\r\nfunction PlantImage(props) {\r\n  switch (props.plantId) {\r\n    case \"1\":\r\n      return (\r\n        <React.Fragment>\r\n          <div id=\"divPrincipal\">\r\n            <img\r\n              src=\"https://www.thegardenstore.sg/image/cache/catalog/products/Plant/Rosemary-910x1155.png\"\r\n              alt=\"Alecrim\"\r\n              className=\"plantImage\"\r\n            ></img>\r\n          </div>\r\n        </React.Fragment>\r\n      );\r\n    case \"2\":\r\n      return (\r\n        <React.Fragment>\r\n          <div id=\"divPrincipal\">\r\n            <img\r\n              src=\"https://www.thegardenstore.sg/image/cache/catalog/products/Plant/Rosemary-910x1155.png\"\r\n              alt=\"Hortelã\"\r\n              className=\"plantImage\"\r\n            ></img>\r\n          </div>\r\n        </React.Fragment>\r\n      );\r\n    case \"3\":\r\n      return (\r\n        <React.Fragment>\r\n          <div id=\"divPrincipal\">\r\n            <img\r\n              src=\"https://db1736767dbd5e7094bb-d61bbc5d0b342a54145a236e2d5d1ebf.ssl.cf4.rackcdn.com/Product-800x800/9782b6a3-5cc8-4bd3-b124-961263a63529.png\"\r\n              alt=\"Lírio\"\r\n              className=\"plantImage\"\r\n            ></img>\r\n          </div>\r\n        </React.Fragment>\r\n      );\r\n    case \"4\":\r\n      return (\r\n        <React.Fragment>\r\n          <div id=\"divPrincipal\">\r\n            <img\r\n              src=\"https://cdn11.bigcommerce.com/s-jmzfi5zcr2/products/799/images/3848/Autumn_Carnival_Encore_Azalea_in_Branded_Pot_Main__58324.1553568083.500.750.png?c=2\"\r\n              alt=\"Azaléia\"\r\n              className=\"plantImage\"\r\n            ></img>\r\n          </div>\r\n        </React.Fragment>\r\n      );\r\n    default:\r\n      return (\r\n        <React.Fragment>\r\n          <div id=\"divPrincipal\">\r\n            <img\r\n              src=\"http://giphygifs.s3.amazonaws.com/media/d5LR1cNJ4vkME/giphy.gif\"\r\n              alt=\"Jarro de Planta\"\r\n              className=\"plantImage\"\r\n            ></img>\r\n          </div>\r\n        </React.Fragment>\r\n      );\r\n  }\r\n}\r\n\r\nexport default PlantImage;\r\n","import React from \"react\";\nimport \"../CSS/MainPage.css\";\n//import axios from \"axios\";\n//import Rect from \"../Components/Rect\";\nimport Board from \"../Components/Board\";\nimport Dashboard from \"../Components/Dashboard\";\nimport PlantImage from \"./PlantImage\";\n//import Option from \"../Components/Option\";\n\nfunction MainPage(props) {\n  console.log(props.dados.body[2].lumens);\n  return (\n    <React.Fragment>\n      <div className=\"menu\">\n        <img\n          className=\"iconRose\"\n          src=\"https://purepng.com/public/uploads/large/11232131312312-eke.png\"\n          alt=\"icon\"\n        ></img>\n        <h1 className=\"h1\">The Smart Garden</h1>\n      </div>\n      <div className=\"mainDiv\">\n        <br></br>\n\n        {/* <select>\n          {<Option plantId=\"1\"></Option> }\n        { }\n        </select> */}\n\n        {/* <table>\n          <tbody>\n          <tr>\n          {props.dados.body.map(plant => <td>{plant.name}</td>)}\n          </tr>\n          </tbody> \n        </table>*/}\n        <Board plantId=\"1\" />\n        <PlantImage className=\"plantImage\" plantId=\"1\"></PlantImage>\n        <Dashboard\n          lampada={props.dados.body[2].lightStatus}\n          air={props.dados.body[2].airHumidity}\n          soloOk={props.dados.body[2].soilHumidityStatus}\n          temperatura={props.dados.body[2].temperature}\n          umidade={props.dados.body[2].soilHumidity}\n          lumens={props.dados.body[2].lumens}\n        ></Dashboard>\n      </div>\n    </React.Fragment>\n  );\n}\nexport default MainPage;\n","import React from 'react';\r\nimport axios from 'axios';\r\nimport MainPage from './MainPage';\r\n\r\nexport default class Request extends React.Component {\r\n    state = {\r\n        dados: {\r\n            body: [1,2,3]\r\n               \r\n            \r\n        },\r\n      }\r\n\r\n  async componentDidMount() {\r\n   setInterval(function(){ document.location.reload(true); }, 60000) \r\n    await axios.get(`https://irkzvvl9m8.execute-api.us-east-1.amazonaws.com/dev/plants?gardenId=1`)\r\n      .then(res => {\r\n       console.log(res.data);\r\n\r\n        const dados = res.data;\r\n        \r\n        this.setState({ dados });\r\n\r\n      })\r\n  }\r\n  \r\n  render() {\r\n       \r\n    return (\r\n        <React.Fragment>\r\n            {/*console.log(this.state.dados.body[0].id)*/}\r\n            {/* this.state.dados.map(person => <p>{person.id}</p>)*/}\r\n            <MainPage dados={this.state.dados}></MainPage>\r\n        </React.Fragment>\r\n    )\r\n  }\r\n}","import React from \"react\";\n//import MainPage from \"./Components/MainPage\";\n//  import PersonList from \"./Components/teste\";\nimport Request from \"./Components/Request\";\nfunction App() {\n  return <Request />;\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}